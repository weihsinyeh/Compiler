Terminals unused in grammar

    TRUE
    FALSE
    IDENT
    VAR
    MUT_LIT


Rules useless in parser due to conflicts

  131 GlobalStatement: NEWLINE


State 4 conflicts: 4 reduce/reduce
State 10 conflicts: 1 shift/reduce
State 46 conflicts: 6 shift/reduce
State 87 conflicts: 1 shift/reduce
State 104 conflicts: 1 reduce/reduce
State 158 conflicts: 24 shift/reduce
State 208 conflicts: 15 shift/reduce


Grammar

    0 $accept: Program $end

    1 $@1: %empty

    2 Program: $@1 GlobalStatementList

    3 GlobalStatementList: GlobalStatementList GlobalStatement
    4                    | GlobalStatement

    5 GlobalStatement: FunctionDeclStmt
    6                | NEWLINE

    7 Type: INT
    8     | FLOAT
    9     | STRING
   10     | BOOL
   11     | ADDR STRING

   12 binary_op: LOR
   13          | LAND
   14          | cmp_op
   15          | add_op
   16          | mul_op
   17          | shift_op

   18 shift_op: LSHIFT
   19         | RSHIFT

   20 cmp_op: EQL
   21       | NEQ
   22       | LSS
   23       | LEQ
   24       | GTR
   25       | GEQ

   26 add_op: ADD
   27       | SUB

   28 mul_op: MUL
   29       | DIV
   30       | REM

   31 unary_op: NOT

   32 Expression: UnaryExpr
   33           | UnaryExpr AS Type

   34 $@2: %empty

   35 Expression: Expression binary_op $@2 Expression

   36 UnaryExpr: PrimaryExpr
   37          | unary_op UnaryExpr
   38          | functionCall

   39 $@3: %empty

   40 functionCall: ID LPAREN $@3 ParameterListInFunctionCall RPAREN
   41             | ID LPAREN RPAREN

   42 ParameterListInFunctionCall: Operand
   43                            | Operand COMMA ParameterListInFunctionCall

   44 PrimaryExpr: Operand
   45            | ConversionExpr

   46 ConversionExpr: Type LPAREN Expression RPAREN

   47 Operand: Literal
   48        | ID
   49        | ADDR Operand LBRACK Interindex RBRACK

   50 $@4: %empty

   51 Operand: ID $@4 LBRACK Expression RBRACK
   52        | LPAREN Expression RPAREN

   53 $@5: %empty

   54 Interindex: DOTDOT $@5 Literal

   55 $@6: %empty

   56 Interindex: Literal DOTDOT $@6 Literal
   57           | Literal DOTDOT

   58 Literal: INT_LIT
   59        | FLOAT_LIT
   60        | BOOL_LIT
   61        | STRING_LIT

   62 assign_op: ASSIGN
   63          | ADD_ASSIGN
   64          | SUB_ASSIGN
   65          | MUL_ASSIGN
   66          | DIV_ASSIGN
   67          | REM_ASSIGN

   68 AssignmentStmt: ID assign_op Expression SEMICOLON

   69 IncDecStmt: Expression INC
   70           | Expression DEC

   71 StatementList: StatementList Statement
   72              | Statement

   73 Statement: DeclarationStmt
   74          | SimpleStmt
   75          | Block
   76          | IfStmt
   77          | ForStmt
   78          | SwitchStmt
   79          | CaseStmt
   80          | LetStatement LetStatementCon
   81          | PrintStmt
   82          | ReturnStmt
   83          | NEWLINE
   84          | WhileStmt
   85          | functionCall SEMICOLON
   86          | LOOPStatement

   87 LOOPStatement: BREAK Literal SEMICOLON

   88 DeclarationStmt: ID Type
   89                | ID Type assign_op Expression

   90 SimpleStmt: AssignmentStmt
   91           | ExpressionStmt
   92           | IncDecStmt

   93 $@7: %empty

   94 Block: LBRACE $@7 StatementList RBRACE

   95 IfStmt: IF Condition Block ELSE IfStmt
   96       | IF Condition Block
   97       | IF Condition Block ELSE Block

   98 WhileStmt: WHILE Condition Block

   99 ForStmt: FOR Condition Block ELSE Block
  100        | FOR ForClause Block ELSE Block
  101        | FOR ForClause LBRACE StatementList RBRACE

  102 ForClause: InitStmt SEMICOLON Condition SEMICOLON PostStmt
  103          | ID IN Operand

  104 InitStmt: SimpleStmt

  105 Condition: Expression

  106 PostStmt: SimpleStmt

  107 SwitchStmt: SWITCH Expression

  108 CaseStmt: CASE INT_LIT COLON Block
  109         | CASE DEFAULT COLON Block

  110 LetStatement: LET ID COLON Type ASSIGN Operand SEMICOLON
  111             | LET ID COLON Type SEMICOLON
  112             | LET MUT ID COLON Type ASSIGN Literal SEMICOLON
  113             | LET MUT ID COLON Type SEMICOLON
  114             | LET ID COLON Type ASSIGN SEMICOLON
  115             | LET MUT ID COLON Type ASSIGN SEMICOLON
  116             | LET MUT ID ASSIGN Operand SEMICOLON
  117             | LET ID COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON
  118             | LET ID ASSIGN Operand SEMICOLON
  119             | LET ID COLON Type ASSIGN LOOP Block SEMICOLON

  120 LiteralList: Literal COMMA LiteralList
  121            | Literal

  122 LetStatementCon: ASSIGN Literal SEMICOLON
  123                | %empty

  124 $@8: %empty

  125 PrintStmt: PRINT Expression $@8 SEMICOLON

  126 $@9: %empty

  127 PrintStmt: PRINTLN Expression $@9 SEMICOLON

  128 ReturnStmt: RETURN Expression SEMICOLON

  129 GlobalStatement: PackageStmt NEWLINE
  130                | FunctionDeclStmt NEWLINE
  131                | NEWLINE

  132 PackageStmt: PACKAGE ID

  133 FunctionDeclStmt: FuncOpen LPAREN RPAREN FuncBlock
  134                 | FuncOpen LPAREN ParameterList RPAREN Type FuncBlock
  135                 | FuncOpen LPAREN RPAREN ARROW Type FuncBlock
  136                 | FuncOpen LPAREN ParameterList RPAREN ARROW Type FuncBlock

  137 FuncOpen: FUNC ID

  138 ParameterList: ID COLON Type
  139              | ParameterList COMMA ID COLON Type

  140 FuncBlock: LBRACE StatementList RBRACE

  141 ExpressionStmt: Expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    LET (258) 110 111 112 113 114 115 116 117 118 119
    MUT (259) 112 113 115 116
    NEWLINE (260) 6 83 129 130 131
    INT (261) 7
    FLOAT (262) 8
    BOOL (263) 10
    STRING (264) 9 11
    TRUE (265)
    FALSE (266)
    GTR (267) 24
    LSS (268) 22
    GEQ (269) 25
    LEQ (270) 23
    EQL (271) 20
    NEQ (272) 21
    LOR (273) 12
    LAND (274) 13
    ASSIGN (275) 62 110 112 114 115 116 117 118 119 122
    ADD_ASSIGN (276) 63
    SUB_ASSIGN (277) 64
    MUL_ASSIGN (278) 65
    DIV_ASSIGN (279) 66
    REM_ASSIGN (280) 67
    IF (281) 95 96 97
    ELSE (282) 95 97 99 100
    FOR (283) 99 100 101
    WHILE (284) 98
    LOOP (285) 119
    SWITCH (286) 107
    CASE (287) 108 109
    DEFAULT (288) 109
    PRINT (289) 125
    PRINTLN (290) 127
    ADDR (291) 11 49
    FUNC (292) 137
    RETURN (293) 128
    BREAK (294) 87
    ID (295) 40 41 48 51 68 88 89 103 110 111 112 113 114 115 116 117 118 119 132 137 138 139
    ARROW (296) 135 136
    AS (297) 33
    IN (298) 103
    DOTDOT (299) 54 56 57
    RSHIFT (300) 19
    LSHIFT (301) 18
    IDENT (302)
    LBRACE (303) 94 101 140
    RBRACE (304) 94 101 140
    LBRACK (305) 49 51 117
    RBRACK (306) 49 51 117
    LPAREN (307) 40 41 46 52 133 134 135 136
    RPAREN (308) 40 41 46 52 133 134 135 136
    INC (309) 69
    DEC (310) 70
    VAR (311)
    COLON (312) 108 109 110 111 112 113 114 115 117 119 138 139
    SEMICOLON (313) 68 85 87 102 110 111 112 113 114 115 116 117 118 119 122 125 127 128
    COMMA (314) 43 120 139
    PACKAGE (315) 132
    ADD (316) 26
    SUB (317) 27
    NOT (318) 31
    MUL (319) 28
    DIV (320) 29
    REM (321) 30
    INT_LIT <val> (322) 58 108
    FLOAT_LIT <val> (323) 59
    BOOL_LIT <val> (324) 60
    STRING_LIT <s_val> (325) 61
    MUT_LIT <mut_val> (326)


Nonterminals, with rules where they appear

    $accept (72)
        on left: 0
    Program (73)
        on left: 2
        on right: 0
    $@1 (74)
        on left: 1
        on right: 2
    GlobalStatementList (75)
        on left: 3 4
        on right: 2 3
    GlobalStatement (76)
        on left: 5 6 129 130 131
        on right: 3 4
    Type <type> (77)
        on left: 7 8 9 10 11
        on right: 33 46 88 89 110 111 112 113 114 115 117 119 134 135 136 138 139
    binary_op <op> (78)
        on left: 12 13 14 15 16 17
        on right: 35
    shift_op <op> (79)
        on left: 18 19
        on right: 17
    cmp_op <op> (80)
        on left: 20 21 22 23 24 25
        on right: 14
    add_op <op> (81)
        on left: 26 27
        on right: 15
    mul_op <op> (82)
        on left: 28 29 30
        on right: 16
    unary_op <op> (83)
        on left: 31
        on right: 37
    Expression <val> (84)
        on left: 32 33 35
        on right: 35 46 51 52 68 69 70 89 105 107 125 127 128 141
    $@2 (85)
        on left: 34
        on right: 35
    UnaryExpr <val> (86)
        on left: 36 37 38
        on right: 32 33 37
    functionCall (87)
        on left: 40 41
        on right: 38 85
    $@3 (88)
        on left: 39
        on right: 40
    ParameterListInFunctionCall (89)
        on left: 42 43
        on right: 40 43
    PrimaryExpr <val> (90)
        on left: 44 45
        on right: 36
    ConversionExpr <val> (91)
        on left: 46
        on right: 45
    Operand <val> (92)
        on left: 47 48 49 51 52
        on right: 42 43 44 49 103 110 116 117 118
    $@4 (93)
        on left: 50
        on right: 51
    Interindex (94)
        on left: 54 56 57
        on right: 49
    $@5 (95)
        on left: 53
        on right: 54
    $@6 (96)
        on left: 55
        on right: 56
    Literal <val> (97)
        on left: 58 59 60 61
        on right: 47 54 56 57 87 112 120 121 122
    assign_op <op> (98)
        on left: 62 63 64 65 66 67
        on right: 68 89
    AssignmentStmt (99)
        on left: 68
        on right: 90
    IncDecStmt (100)
        on left: 69 70
        on right: 92
    StatementList (101)
        on left: 71 72
        on right: 71 94 101 140
    Statement (102)
        on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86
        on right: 71 72
    LOOPStatement (103)
        on left: 87
        on right: 86
    DeclarationStmt (104)
        on left: 88 89
        on right: 73
    SimpleStmt (105)
        on left: 90 91 92
        on right: 74 104 106
    Block (106)
        on left: 94
        on right: 75 95 96 97 98 99 100 108 109 119
    $@7 (107)
        on left: 93
        on right: 94
    IfStmt (108)
        on left: 95 96 97
        on right: 76 95
    WhileStmt (109)
        on left: 98
        on right: 84
    ForStmt (110)
        on left: 99 100 101
        on right: 77
    ForClause (111)
        on left: 102 103
        on right: 100 101
    InitStmt (112)
        on left: 104
        on right: 102
    Condition (113)
        on left: 105
        on right: 95 96 97 98 99 102
    PostStmt (114)
        on left: 106
        on right: 102
    SwitchStmt (115)
        on left: 107
        on right: 78
    CaseStmt (116)
        on left: 108 109
        on right: 79
    LetStatement (117)
        on left: 110 111 112 113 114 115 116 117 118 119
        on right: 80
    LiteralList (118)
        on left: 120 121
        on right: 117 120
    LetStatementCon (119)
        on left: 122 123
        on right: 80
    PrintStmt <type> (120)
        on left: 125 127
        on right: 81
    $@8 (121)
        on left: 124
        on right: 125
    $@9 (122)
        on left: 126
        on right: 127
    ReturnStmt (123)
        on left: 128
        on right: 82
    PackageStmt (124)
        on left: 132
        on right: 129
    FunctionDeclStmt (125)
        on left: 133 134 135 136
        on right: 5 130
    FuncOpen <s_val> (126)
        on left: 137
        on right: 133 134 135 136
    ParameterList <s_val> (127)
        on left: 138 139
        on right: 134 136 139
    FuncBlock (128)
        on left: 140
        on right: 133 134 135 136
    ExpressionStmt (129)
        on left: 141
        on right: 91


State 0

    0 $accept: . Program $end

    $default  reduce using rule 1 ($@1)

    Program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    2 Program: $@1 . GlobalStatementList

    NEWLINE  shift, and go to state 4
    FUNC     shift, and go to state 5
    PACKAGE  shift, and go to state 6

    GlobalStatementList  go to state 7
    GlobalStatement      go to state 8
    PackageStmt          go to state 9
    FunctionDeclStmt     go to state 10
    FuncOpen             go to state 11


State 3

    0 $accept: Program $end .

    $default  accept


State 4

    6 GlobalStatement: NEWLINE .
  131                | NEWLINE .

    $end      reduce using rule 6 (GlobalStatement)
    $end      [reduce using rule 131 (GlobalStatement)]
    NEWLINE   reduce using rule 6 (GlobalStatement)
    NEWLINE   [reduce using rule 131 (GlobalStatement)]
    FUNC      reduce using rule 6 (GlobalStatement)
    FUNC      [reduce using rule 131 (GlobalStatement)]
    PACKAGE   reduce using rule 6 (GlobalStatement)
    PACKAGE   [reduce using rule 131 (GlobalStatement)]
    $default  reduce using rule 6 (GlobalStatement)


State 5

  137 FuncOpen: FUNC . ID

    ID  shift, and go to state 12


State 6

  132 PackageStmt: PACKAGE . ID

    ID  shift, and go to state 13


State 7

    2 Program: $@1 GlobalStatementList .
    3 GlobalStatementList: GlobalStatementList . GlobalStatement

    NEWLINE  shift, and go to state 4
    FUNC     shift, and go to state 5
    PACKAGE  shift, and go to state 6

    $default  reduce using rule 2 (Program)

    GlobalStatement   go to state 14
    PackageStmt       go to state 9
    FunctionDeclStmt  go to state 10
    FuncOpen          go to state 11


State 8

    4 GlobalStatementList: GlobalStatement .

    $default  reduce using rule 4 (GlobalStatementList)


State 9

  129 GlobalStatement: PackageStmt . NEWLINE

    NEWLINE  shift, and go to state 15


State 10

    5 GlobalStatement: FunctionDeclStmt .
  130                | FunctionDeclStmt . NEWLINE

    NEWLINE  shift, and go to state 16

    NEWLINE   [reduce using rule 5 (GlobalStatement)]
    $default  reduce using rule 5 (GlobalStatement)


State 11

  133 FunctionDeclStmt: FuncOpen . LPAREN RPAREN FuncBlock
  134                 | FuncOpen . LPAREN ParameterList RPAREN Type FuncBlock
  135                 | FuncOpen . LPAREN RPAREN ARROW Type FuncBlock
  136                 | FuncOpen . LPAREN ParameterList RPAREN ARROW Type FuncBlock

    LPAREN  shift, and go to state 17


State 12

  137 FuncOpen: FUNC ID .

    $default  reduce using rule 137 (FuncOpen)


State 13

  132 PackageStmt: PACKAGE ID .

    $default  reduce using rule 132 (PackageStmt)


State 14

    3 GlobalStatementList: GlobalStatementList GlobalStatement .

    $default  reduce using rule 3 (GlobalStatementList)


State 15

  129 GlobalStatement: PackageStmt NEWLINE .

    $default  reduce using rule 129 (GlobalStatement)


State 16

  130 GlobalStatement: FunctionDeclStmt NEWLINE .

    $default  reduce using rule 130 (GlobalStatement)


State 17

  133 FunctionDeclStmt: FuncOpen LPAREN . RPAREN FuncBlock
  134                 | FuncOpen LPAREN . ParameterList RPAREN Type FuncBlock
  135                 | FuncOpen LPAREN . RPAREN ARROW Type FuncBlock
  136                 | FuncOpen LPAREN . ParameterList RPAREN ARROW Type FuncBlock

    ID      shift, and go to state 18
    RPAREN  shift, and go to state 19

    ParameterList  go to state 20


State 18

  138 ParameterList: ID . COLON Type

    COLON  shift, and go to state 21


State 19

  133 FunctionDeclStmt: FuncOpen LPAREN RPAREN . FuncBlock
  135                 | FuncOpen LPAREN RPAREN . ARROW Type FuncBlock

    ARROW   shift, and go to state 22
    LBRACE  shift, and go to state 23

    FuncBlock  go to state 24


State 20

  134 FunctionDeclStmt: FuncOpen LPAREN ParameterList . RPAREN Type FuncBlock
  136                 | FuncOpen LPAREN ParameterList . RPAREN ARROW Type FuncBlock
  139 ParameterList: ParameterList . COMMA ID COLON Type

    RPAREN  shift, and go to state 25
    COMMA   shift, and go to state 26


State 21

  138 ParameterList: ID COLON . Type

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31

    Type  go to state 32


State 22

  135 FunctionDeclStmt: FuncOpen LPAREN RPAREN ARROW . Type FuncBlock

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31

    Type  go to state 33


State 23

  140 FuncBlock: LBRACE . StatementList RBRACE

    LET         shift, and go to state 34
    NEWLINE     shift, and go to state 35
    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    IF          shift, and go to state 36
    FOR         shift, and go to state 37
    WHILE       shift, and go to state 38
    SWITCH      shift, and go to state 39
    CASE        shift, and go to state 40
    PRINT       shift, and go to state 41
    PRINTLN     shift, and go to state 42
    ADDR        shift, and go to state 43
    RETURN      shift, and go to state 44
    BREAK       shift, and go to state 45
    ID          shift, and go to state 46
    LBRACE      shift, and go to state 47
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type             go to state 54
    unary_op         go to state 55
    Expression       go to state 56
    UnaryExpr        go to state 57
    functionCall     go to state 58
    PrimaryExpr      go to state 59
    ConversionExpr   go to state 60
    Operand          go to state 61
    Literal          go to state 62
    AssignmentStmt   go to state 63
    IncDecStmt       go to state 64
    StatementList    go to state 65
    Statement        go to state 66
    LOOPStatement    go to state 67
    DeclarationStmt  go to state 68
    SimpleStmt       go to state 69
    Block            go to state 70
    IfStmt           go to state 71
    WhileStmt        go to state 72
    ForStmt          go to state 73
    SwitchStmt       go to state 74
    CaseStmt         go to state 75
    LetStatement     go to state 76
    PrintStmt        go to state 77
    ReturnStmt       go to state 78
    ExpressionStmt   go to state 79


State 24

  133 FunctionDeclStmt: FuncOpen LPAREN RPAREN FuncBlock .

    $default  reduce using rule 133 (FunctionDeclStmt)


State 25

  134 FunctionDeclStmt: FuncOpen LPAREN ParameterList RPAREN . Type FuncBlock
  136                 | FuncOpen LPAREN ParameterList RPAREN . ARROW Type FuncBlock

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31
    ARROW   shift, and go to state 80

    Type  go to state 81


State 26

  139 ParameterList: ParameterList COMMA . ID COLON Type

    ID  shift, and go to state 82


State 27

    7 Type: INT .

    $default  reduce using rule 7 (Type)


State 28

    8 Type: FLOAT .

    $default  reduce using rule 8 (Type)


State 29

   10 Type: BOOL .

    $default  reduce using rule 10 (Type)


State 30

    9 Type: STRING .

    $default  reduce using rule 9 (Type)


State 31

   11 Type: ADDR . STRING

    STRING  shift, and go to state 83


State 32

  138 ParameterList: ID COLON Type .

    $default  reduce using rule 138 (ParameterList)


State 33

  135 FunctionDeclStmt: FuncOpen LPAREN RPAREN ARROW Type . FuncBlock

    LBRACE  shift, and go to state 23

    FuncBlock  go to state 84


State 34

  110 LetStatement: LET . ID COLON Type ASSIGN Operand SEMICOLON
  111             | LET . ID COLON Type SEMICOLON
  112             | LET . MUT ID COLON Type ASSIGN Literal SEMICOLON
  113             | LET . MUT ID COLON Type SEMICOLON
  114             | LET . ID COLON Type ASSIGN SEMICOLON
  115             | LET . MUT ID COLON Type ASSIGN SEMICOLON
  116             | LET . MUT ID ASSIGN Operand SEMICOLON
  117             | LET . ID COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON
  118             | LET . ID ASSIGN Operand SEMICOLON
  119             | LET . ID COLON Type ASSIGN LOOP Block SEMICOLON

    MUT  shift, and go to state 85
    ID   shift, and go to state 86


State 35

   83 Statement: NEWLINE .

    $default  reduce using rule 83 (Statement)


State 36

   95 IfStmt: IF . Condition Block ELSE IfStmt
   96       | IF . Condition Block
   97       | IF . Condition Block ELSE Block

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 88
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62
    Condition       go to state 90


State 37

   99 ForStmt: FOR . Condition Block ELSE Block
  100        | FOR . ForClause Block ELSE Block
  101        | FOR . ForClause LBRACE StatementList RBRACE

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 91
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 92
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62
    AssignmentStmt  go to state 63
    IncDecStmt      go to state 64
    SimpleStmt      go to state 93
    ForClause       go to state 94
    InitStmt        go to state 95
    Condition       go to state 96
    ExpressionStmt  go to state 79


State 38

   98 WhileStmt: WHILE . Condition Block

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 88
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62
    Condition       go to state 97


State 39

  107 SwitchStmt: SWITCH . Expression

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 98
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 40

  108 CaseStmt: CASE . INT_LIT COLON Block
  109         | CASE . DEFAULT COLON Block

    DEFAULT  shift, and go to state 99
    INT_LIT  shift, and go to state 100


State 41

  125 PrintStmt: PRINT . Expression $@8 SEMICOLON

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 101
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 42

  127 PrintStmt: PRINTLN . Expression $@9 SEMICOLON

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 102
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 43

   11 Type: ADDR . STRING
   49 Operand: ADDR . Operand LBRACK Interindex RBRACK

    STRING      shift, and go to state 83
    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Operand  go to state 105
    Literal  go to state 62


State 44

  128 ReturnStmt: RETURN . Expression SEMICOLON

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 106
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 45

   87 LOOPStatement: BREAK . Literal SEMICOLON

    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Literal  go to state 107


State 46

   40 functionCall: ID . LPAREN $@3 ParameterListInFunctionCall RPAREN
   41             | ID . LPAREN RPAREN
   48 Operand: ID .
   51        | ID . $@4 LBRACK Expression RBRACK
   68 AssignmentStmt: ID . assign_op Expression SEMICOLON
   88 DeclarationStmt: ID . Type
   89                | ID . Type assign_op Expression

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ASSIGN      shift, and go to state 108
    ADD_ASSIGN  shift, and go to state 109
    SUB_ASSIGN  shift, and go to state 110
    MUL_ASSIGN  shift, and go to state 111
    DIV_ASSIGN  shift, and go to state 112
    REM_ASSIGN  shift, and go to state 113
    ADDR        shift, and go to state 31
    LPAREN      shift, and go to state 114

    INT       [reduce using rule 48 (Operand)]
    FLOAT     [reduce using rule 48 (Operand)]
    BOOL      [reduce using rule 48 (Operand)]
    STRING    [reduce using rule 48 (Operand)]
    ADDR      [reduce using rule 48 (Operand)]
    LBRACK    reduce using rule 50 ($@4)
    LPAREN    [reduce using rule 48 (Operand)]
    $default  reduce using rule 48 (Operand)

    Type       go to state 115
    $@4        go to state 116
    assign_op  go to state 117


State 47

   94 Block: LBRACE . $@7 StatementList RBRACE

    $default  reduce using rule 93 ($@7)

    $@7  go to state 118


State 48

   52 Operand: LPAREN . Expression RPAREN

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 119
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 49

   31 unary_op: NOT .

    $default  reduce using rule 31 (unary_op)


State 50

   58 Literal: INT_LIT .

    $default  reduce using rule 58 (Literal)


State 51

   59 Literal: FLOAT_LIT .

    $default  reduce using rule 59 (Literal)


State 52

   60 Literal: BOOL_LIT .

    $default  reduce using rule 60 (Literal)


State 53

   61 Literal: STRING_LIT .

    $default  reduce using rule 61 (Literal)


State 54

   46 ConversionExpr: Type . LPAREN Expression RPAREN

    LPAREN  shift, and go to state 120


State 55

   37 UnaryExpr: unary_op . UnaryExpr

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    UnaryExpr       go to state 121
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 56

   35 Expression: Expression . binary_op $@2 Expression
   69 IncDecStmt: Expression . INC
   70           | Expression . DEC
  141 ExpressionStmt: Expression .

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    INC     shift, and go to state 132
    DEC     shift, and go to state 133
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    $default  reduce using rule 141 (ExpressionStmt)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 57

   32 Expression: UnaryExpr .
   33           | UnaryExpr . AS Type

    AS  shift, and go to state 144

    $default  reduce using rule 32 (Expression)


State 58

   38 UnaryExpr: functionCall .
   85 Statement: functionCall . SEMICOLON

    SEMICOLON  shift, and go to state 145

    $default  reduce using rule 38 (UnaryExpr)


State 59

   36 UnaryExpr: PrimaryExpr .

    $default  reduce using rule 36 (UnaryExpr)


State 60

   45 PrimaryExpr: ConversionExpr .

    $default  reduce using rule 45 (PrimaryExpr)


State 61

   44 PrimaryExpr: Operand .

    $default  reduce using rule 44 (PrimaryExpr)


State 62

   47 Operand: Literal .

    $default  reduce using rule 47 (Operand)


State 63

   90 SimpleStmt: AssignmentStmt .

    $default  reduce using rule 90 (SimpleStmt)


State 64

   92 SimpleStmt: IncDecStmt .

    $default  reduce using rule 92 (SimpleStmt)


State 65

   71 StatementList: StatementList . Statement
  140 FuncBlock: LBRACE StatementList . RBRACE

    LET         shift, and go to state 34
    NEWLINE     shift, and go to state 35
    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    IF          shift, and go to state 36
    FOR         shift, and go to state 37
    WHILE       shift, and go to state 38
    SWITCH      shift, and go to state 39
    CASE        shift, and go to state 40
    PRINT       shift, and go to state 41
    PRINTLN     shift, and go to state 42
    ADDR        shift, and go to state 43
    RETURN      shift, and go to state 44
    BREAK       shift, and go to state 45
    ID          shift, and go to state 46
    LBRACE      shift, and go to state 47
    RBRACE      shift, and go to state 146
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type             go to state 54
    unary_op         go to state 55
    Expression       go to state 56
    UnaryExpr        go to state 57
    functionCall     go to state 58
    PrimaryExpr      go to state 59
    ConversionExpr   go to state 60
    Operand          go to state 61
    Literal          go to state 62
    AssignmentStmt   go to state 63
    IncDecStmt       go to state 64
    Statement        go to state 147
    LOOPStatement    go to state 67
    DeclarationStmt  go to state 68
    SimpleStmt       go to state 69
    Block            go to state 70
    IfStmt           go to state 71
    WhileStmt        go to state 72
    ForStmt          go to state 73
    SwitchStmt       go to state 74
    CaseStmt         go to state 75
    LetStatement     go to state 76
    PrintStmt        go to state 77
    ReturnStmt       go to state 78
    ExpressionStmt   go to state 79


State 66

   72 StatementList: Statement .

    $default  reduce using rule 72 (StatementList)


State 67

   86 Statement: LOOPStatement .

    $default  reduce using rule 86 (Statement)


State 68

   73 Statement: DeclarationStmt .

    $default  reduce using rule 73 (Statement)


State 69

   74 Statement: SimpleStmt .

    $default  reduce using rule 74 (Statement)


State 70

   75 Statement: Block .

    $default  reduce using rule 75 (Statement)


State 71

   76 Statement: IfStmt .

    $default  reduce using rule 76 (Statement)


State 72

   84 Statement: WhileStmt .

    $default  reduce using rule 84 (Statement)


State 73

   77 Statement: ForStmt .

    $default  reduce using rule 77 (Statement)


State 74

   78 Statement: SwitchStmt .

    $default  reduce using rule 78 (Statement)


State 75

   79 Statement: CaseStmt .

    $default  reduce using rule 79 (Statement)


State 76

   80 Statement: LetStatement . LetStatementCon

    ASSIGN  shift, and go to state 148

    $default  reduce using rule 123 (LetStatementCon)

    LetStatementCon  go to state 149


State 77

   81 Statement: PrintStmt .

    $default  reduce using rule 81 (Statement)


State 78

   82 Statement: ReturnStmt .

    $default  reduce using rule 82 (Statement)


State 79

   91 SimpleStmt: ExpressionStmt .

    $default  reduce using rule 91 (SimpleStmt)


State 80

  136 FunctionDeclStmt: FuncOpen LPAREN ParameterList RPAREN ARROW . Type FuncBlock

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31

    Type  go to state 150


State 81

  134 FunctionDeclStmt: FuncOpen LPAREN ParameterList RPAREN Type . FuncBlock

    LBRACE  shift, and go to state 23

    FuncBlock  go to state 151


State 82

  139 ParameterList: ParameterList COMMA ID . COLON Type

    COLON  shift, and go to state 152


State 83

   11 Type: ADDR STRING .

    $default  reduce using rule 11 (Type)


State 84

  135 FunctionDeclStmt: FuncOpen LPAREN RPAREN ARROW Type FuncBlock .

    $default  reduce using rule 135 (FunctionDeclStmt)


State 85

  112 LetStatement: LET MUT . ID COLON Type ASSIGN Literal SEMICOLON
  113             | LET MUT . ID COLON Type SEMICOLON
  115             | LET MUT . ID COLON Type ASSIGN SEMICOLON
  116             | LET MUT . ID ASSIGN Operand SEMICOLON

    ID  shift, and go to state 153


State 86

  110 LetStatement: LET ID . COLON Type ASSIGN Operand SEMICOLON
  111             | LET ID . COLON Type SEMICOLON
  114             | LET ID . COLON Type ASSIGN SEMICOLON
  117             | LET ID . COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON
  118             | LET ID . ASSIGN Operand SEMICOLON
  119             | LET ID . COLON Type ASSIGN LOOP Block SEMICOLON

    ASSIGN  shift, and go to state 154
    COLON   shift, and go to state 155


State 87

   40 functionCall: ID . LPAREN $@3 ParameterListInFunctionCall RPAREN
   41             | ID . LPAREN RPAREN
   48 Operand: ID .
   51        | ID . $@4 LBRACK Expression RBRACK

    LPAREN  shift, and go to state 114

    LBRACK    reduce using rule 50 ($@4)
    LPAREN    [reduce using rule 48 (Operand)]
    $default  reduce using rule 48 (Operand)

    $@4  go to state 116


State 88

   35 Expression: Expression . binary_op $@2 Expression
  105 Condition: Expression .

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    $default  reduce using rule 105 (Condition)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 89

   38 UnaryExpr: functionCall .

    $default  reduce using rule 38 (UnaryExpr)


State 90

   95 IfStmt: IF Condition . Block ELSE IfStmt
   96       | IF Condition . Block
   97       | IF Condition . Block ELSE Block

    LBRACE  shift, and go to state 47

    Block  go to state 156


State 91

   40 functionCall: ID . LPAREN $@3 ParameterListInFunctionCall RPAREN
   41             | ID . LPAREN RPAREN
   48 Operand: ID .
   51        | ID . $@4 LBRACK Expression RBRACK
   68 AssignmentStmt: ID . assign_op Expression SEMICOLON
  103 ForClause: ID . IN Operand

    ASSIGN      shift, and go to state 108
    ADD_ASSIGN  shift, and go to state 109
    SUB_ASSIGN  shift, and go to state 110
    MUL_ASSIGN  shift, and go to state 111
    DIV_ASSIGN  shift, and go to state 112
    REM_ASSIGN  shift, and go to state 113
    IN          shift, and go to state 157
    LPAREN      shift, and go to state 114

    LBRACK    reduce using rule 50 ($@4)
    $default  reduce using rule 48 (Operand)

    $@4        go to state 116
    assign_op  go to state 117


State 92

   35 Expression: Expression . binary_op $@2 Expression
   69 IncDecStmt: Expression . INC
   70           | Expression . DEC
  105 Condition: Expression .
  141 ExpressionStmt: Expression .

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    INC     shift, and go to state 132
    DEC     shift, and go to state 133
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    SEMICOLON  reduce using rule 141 (ExpressionStmt)
    $default   reduce using rule 105 (Condition)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 93

  104 InitStmt: SimpleStmt .

    $default  reduce using rule 104 (InitStmt)


State 94

  100 ForStmt: FOR ForClause . Block ELSE Block
  101        | FOR ForClause . LBRACE StatementList RBRACE

    LBRACE  shift, and go to state 158

    Block  go to state 159


State 95

  102 ForClause: InitStmt . SEMICOLON Condition SEMICOLON PostStmt

    SEMICOLON  shift, and go to state 160


State 96

   99 ForStmt: FOR Condition . Block ELSE Block

    LBRACE  shift, and go to state 47

    Block  go to state 161


State 97

   98 WhileStmt: WHILE Condition . Block

    LBRACE  shift, and go to state 47

    Block  go to state 162


State 98

   35 Expression: Expression . binary_op $@2 Expression
  107 SwitchStmt: SWITCH Expression .

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    $default  reduce using rule 107 (SwitchStmt)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 99

  109 CaseStmt: CASE DEFAULT . COLON Block

    COLON  shift, and go to state 163


State 100

  108 CaseStmt: CASE INT_LIT . COLON Block

    COLON  shift, and go to state 164


State 101

   35 Expression: Expression . binary_op $@2 Expression
  125 PrintStmt: PRINT Expression . $@8 SEMICOLON

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    $default  reduce using rule 124 ($@8)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143
    $@8        go to state 165


State 102

   35 Expression: Expression . binary_op $@2 Expression
  127 PrintStmt: PRINTLN Expression . $@9 SEMICOLON

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    $default  reduce using rule 126 ($@9)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143
    $@9        go to state 166


State 103

   49 Operand: ADDR . Operand LBRACK Interindex RBRACK

    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Operand  go to state 105
    Literal  go to state 62


State 104

   48 Operand: ID .
   51        | ID . $@4 LBRACK Expression RBRACK

    LBRACK    reduce using rule 48 (Operand)
    LBRACK    [reduce using rule 50 ($@4)]
    $default  reduce using rule 48 (Operand)

    $@4  go to state 116


State 105

   49 Operand: ADDR Operand . LBRACK Interindex RBRACK

    LBRACK  shift, and go to state 167


State 106

   35 Expression: Expression . binary_op $@2 Expression
  128 ReturnStmt: RETURN Expression . SEMICOLON

    GTR        shift, and go to state 122
    LSS        shift, and go to state 123
    GEQ        shift, and go to state 124
    LEQ        shift, and go to state 125
    EQL        shift, and go to state 126
    NEQ        shift, and go to state 127
    LOR        shift, and go to state 128
    LAND       shift, and go to state 129
    RSHIFT     shift, and go to state 130
    LSHIFT     shift, and go to state 131
    SEMICOLON  shift, and go to state 168
    ADD        shift, and go to state 134
    SUB        shift, and go to state 135
    MUL        shift, and go to state 136
    DIV        shift, and go to state 137
    REM        shift, and go to state 138

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 107

   87 LOOPStatement: BREAK Literal . SEMICOLON

    SEMICOLON  shift, and go to state 169


State 108

   62 assign_op: ASSIGN .

    $default  reduce using rule 62 (assign_op)


State 109

   63 assign_op: ADD_ASSIGN .

    $default  reduce using rule 63 (assign_op)


State 110

   64 assign_op: SUB_ASSIGN .

    $default  reduce using rule 64 (assign_op)


State 111

   65 assign_op: MUL_ASSIGN .

    $default  reduce using rule 65 (assign_op)


State 112

   66 assign_op: DIV_ASSIGN .

    $default  reduce using rule 66 (assign_op)


State 113

   67 assign_op: REM_ASSIGN .

    $default  reduce using rule 67 (assign_op)


State 114

   40 functionCall: ID LPAREN . $@3 ParameterListInFunctionCall RPAREN
   41             | ID LPAREN . RPAREN

    RPAREN  shift, and go to state 170

    $default  reduce using rule 39 ($@3)

    $@3  go to state 171


State 115

   88 DeclarationStmt: ID Type .
   89                | ID Type . assign_op Expression

    ASSIGN      shift, and go to state 108
    ADD_ASSIGN  shift, and go to state 109
    SUB_ASSIGN  shift, and go to state 110
    MUL_ASSIGN  shift, and go to state 111
    DIV_ASSIGN  shift, and go to state 112
    REM_ASSIGN  shift, and go to state 113

    $default  reduce using rule 88 (DeclarationStmt)

    assign_op  go to state 172


State 116

   51 Operand: ID $@4 . LBRACK Expression RBRACK

    LBRACK  shift, and go to state 173


State 117

   68 AssignmentStmt: ID assign_op . Expression SEMICOLON

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 174
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 118

   94 Block: LBRACE $@7 . StatementList RBRACE

    LET         shift, and go to state 34
    NEWLINE     shift, and go to state 35
    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    IF          shift, and go to state 36
    FOR         shift, and go to state 37
    WHILE       shift, and go to state 38
    SWITCH      shift, and go to state 39
    CASE        shift, and go to state 40
    PRINT       shift, and go to state 41
    PRINTLN     shift, and go to state 42
    ADDR        shift, and go to state 43
    RETURN      shift, and go to state 44
    BREAK       shift, and go to state 45
    ID          shift, and go to state 46
    LBRACE      shift, and go to state 47
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type             go to state 54
    unary_op         go to state 55
    Expression       go to state 56
    UnaryExpr        go to state 57
    functionCall     go to state 58
    PrimaryExpr      go to state 59
    ConversionExpr   go to state 60
    Operand          go to state 61
    Literal          go to state 62
    AssignmentStmt   go to state 63
    IncDecStmt       go to state 64
    StatementList    go to state 175
    Statement        go to state 66
    LOOPStatement    go to state 67
    DeclarationStmt  go to state 68
    SimpleStmt       go to state 69
    Block            go to state 70
    IfStmt           go to state 71
    WhileStmt        go to state 72
    ForStmt          go to state 73
    SwitchStmt       go to state 74
    CaseStmt         go to state 75
    LetStatement     go to state 76
    PrintStmt        go to state 77
    ReturnStmt       go to state 78
    ExpressionStmt   go to state 79


State 119

   35 Expression: Expression . binary_op $@2 Expression
   52 Operand: LPAREN Expression . RPAREN

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    RPAREN  shift, and go to state 176
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 120

   46 ConversionExpr: Type LPAREN . Expression RPAREN

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 177
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 121

   37 UnaryExpr: unary_op UnaryExpr .

    $default  reduce using rule 37 (UnaryExpr)


State 122

   24 cmp_op: GTR .

    $default  reduce using rule 24 (cmp_op)


State 123

   22 cmp_op: LSS .

    $default  reduce using rule 22 (cmp_op)


State 124

   25 cmp_op: GEQ .

    $default  reduce using rule 25 (cmp_op)


State 125

   23 cmp_op: LEQ .

    $default  reduce using rule 23 (cmp_op)


State 126

   20 cmp_op: EQL .

    $default  reduce using rule 20 (cmp_op)


State 127

   21 cmp_op: NEQ .

    $default  reduce using rule 21 (cmp_op)


State 128

   12 binary_op: LOR .

    $default  reduce using rule 12 (binary_op)


State 129

   13 binary_op: LAND .

    $default  reduce using rule 13 (binary_op)


State 130

   19 shift_op: RSHIFT .

    $default  reduce using rule 19 (shift_op)


State 131

   18 shift_op: LSHIFT .

    $default  reduce using rule 18 (shift_op)


State 132

   69 IncDecStmt: Expression INC .

    $default  reduce using rule 69 (IncDecStmt)


State 133

   70 IncDecStmt: Expression DEC .

    $default  reduce using rule 70 (IncDecStmt)


State 134

   26 add_op: ADD .

    $default  reduce using rule 26 (add_op)


State 135

   27 add_op: SUB .

    $default  reduce using rule 27 (add_op)


State 136

   28 mul_op: MUL .

    $default  reduce using rule 28 (mul_op)


State 137

   29 mul_op: DIV .

    $default  reduce using rule 29 (mul_op)


State 138

   30 mul_op: REM .

    $default  reduce using rule 30 (mul_op)


State 139

   35 Expression: Expression binary_op . $@2 Expression

    $default  reduce using rule 34 ($@2)

    $@2  go to state 178


State 140

   17 binary_op: shift_op .

    $default  reduce using rule 17 (binary_op)


State 141

   14 binary_op: cmp_op .

    $default  reduce using rule 14 (binary_op)


State 142

   15 binary_op: add_op .

    $default  reduce using rule 15 (binary_op)


State 143

   16 binary_op: mul_op .

    $default  reduce using rule 16 (binary_op)


State 144

   33 Expression: UnaryExpr AS . Type

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31

    Type  go to state 179


State 145

   85 Statement: functionCall SEMICOLON .

    $default  reduce using rule 85 (Statement)


State 146

  140 FuncBlock: LBRACE StatementList RBRACE .

    $default  reduce using rule 140 (FuncBlock)


State 147

   71 StatementList: StatementList Statement .

    $default  reduce using rule 71 (StatementList)


State 148

  122 LetStatementCon: ASSIGN . Literal SEMICOLON

    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Literal  go to state 180


State 149

   80 Statement: LetStatement LetStatementCon .

    $default  reduce using rule 80 (Statement)


State 150

  136 FunctionDeclStmt: FuncOpen LPAREN ParameterList RPAREN ARROW Type . FuncBlock

    LBRACE  shift, and go to state 23

    FuncBlock  go to state 181


State 151

  134 FunctionDeclStmt: FuncOpen LPAREN ParameterList RPAREN Type FuncBlock .

    $default  reduce using rule 134 (FunctionDeclStmt)


State 152

  139 ParameterList: ParameterList COMMA ID COLON . Type

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31

    Type  go to state 182


State 153

  112 LetStatement: LET MUT ID . COLON Type ASSIGN Literal SEMICOLON
  113             | LET MUT ID . COLON Type SEMICOLON
  115             | LET MUT ID . COLON Type ASSIGN SEMICOLON
  116             | LET MUT ID . ASSIGN Operand SEMICOLON

    ASSIGN  shift, and go to state 183
    COLON   shift, and go to state 184


State 154

  118 LetStatement: LET ID ASSIGN . Operand SEMICOLON

    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Operand  go to state 185
    Literal  go to state 62


State 155

  110 LetStatement: LET ID COLON . Type ASSIGN Operand SEMICOLON
  111             | LET ID COLON . Type SEMICOLON
  114             | LET ID COLON . Type ASSIGN SEMICOLON
  117             | LET ID COLON . LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON
  119             | LET ID COLON . Type ASSIGN LOOP Block SEMICOLON

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31
    LBRACK  shift, and go to state 186

    Type  go to state 187


State 156

   95 IfStmt: IF Condition Block . ELSE IfStmt
   96       | IF Condition Block .
   97       | IF Condition Block . ELSE Block

    ELSE  shift, and go to state 188

    $default  reduce using rule 96 (IfStmt)


State 157

  103 ForClause: ID IN . Operand

    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Operand  go to state 189
    Literal  go to state 62


State 158

   94 Block: LBRACE . $@7 StatementList RBRACE
  101 ForStmt: FOR ForClause LBRACE . StatementList RBRACE

    LET         shift, and go to state 34
    NEWLINE     shift, and go to state 35
    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    IF          shift, and go to state 36
    FOR         shift, and go to state 37
    WHILE       shift, and go to state 38
    SWITCH      shift, and go to state 39
    CASE        shift, and go to state 40
    PRINT       shift, and go to state 41
    PRINTLN     shift, and go to state 42
    ADDR        shift, and go to state 43
    RETURN      shift, and go to state 44
    BREAK       shift, and go to state 45
    ID          shift, and go to state 46
    LBRACE      shift, and go to state 47
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    LET         [reduce using rule 93 ($@7)]
    NEWLINE     [reduce using rule 93 ($@7)]
    INT         [reduce using rule 93 ($@7)]
    FLOAT       [reduce using rule 93 ($@7)]
    BOOL        [reduce using rule 93 ($@7)]
    STRING      [reduce using rule 93 ($@7)]
    IF          [reduce using rule 93 ($@7)]
    FOR         [reduce using rule 93 ($@7)]
    WHILE       [reduce using rule 93 ($@7)]
    SWITCH      [reduce using rule 93 ($@7)]
    CASE        [reduce using rule 93 ($@7)]
    PRINT       [reduce using rule 93 ($@7)]
    PRINTLN     [reduce using rule 93 ($@7)]
    ADDR        [reduce using rule 93 ($@7)]
    RETURN      [reduce using rule 93 ($@7)]
    BREAK       [reduce using rule 93 ($@7)]
    ID          [reduce using rule 93 ($@7)]
    LBRACE      [reduce using rule 93 ($@7)]
    LPAREN      [reduce using rule 93 ($@7)]
    NOT         [reduce using rule 93 ($@7)]
    INT_LIT     [reduce using rule 93 ($@7)]
    FLOAT_LIT   [reduce using rule 93 ($@7)]
    BOOL_LIT    [reduce using rule 93 ($@7)]
    STRING_LIT  [reduce using rule 93 ($@7)]

    Type             go to state 54
    unary_op         go to state 55
    Expression       go to state 56
    UnaryExpr        go to state 57
    functionCall     go to state 58
    PrimaryExpr      go to state 59
    ConversionExpr   go to state 60
    Operand          go to state 61
    Literal          go to state 62
    AssignmentStmt   go to state 63
    IncDecStmt       go to state 64
    StatementList    go to state 190
    Statement        go to state 66
    LOOPStatement    go to state 67
    DeclarationStmt  go to state 68
    SimpleStmt       go to state 69
    Block            go to state 70
    $@7              go to state 118
    IfStmt           go to state 71
    WhileStmt        go to state 72
    ForStmt          go to state 73
    SwitchStmt       go to state 74
    CaseStmt         go to state 75
    LetStatement     go to state 76
    PrintStmt        go to state 77
    ReturnStmt       go to state 78
    ExpressionStmt   go to state 79


State 159

  100 ForStmt: FOR ForClause Block . ELSE Block

    ELSE  shift, and go to state 191


State 160

  102 ForClause: InitStmt SEMICOLON . Condition SEMICOLON PostStmt

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 88
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62
    Condition       go to state 192


State 161

   99 ForStmt: FOR Condition Block . ELSE Block

    ELSE  shift, and go to state 193


State 162

   98 WhileStmt: WHILE Condition Block .

    $default  reduce using rule 98 (WhileStmt)


State 163

  109 CaseStmt: CASE DEFAULT COLON . Block

    LBRACE  shift, and go to state 47

    Block  go to state 194


State 164

  108 CaseStmt: CASE INT_LIT COLON . Block

    LBRACE  shift, and go to state 47

    Block  go to state 195


State 165

  125 PrintStmt: PRINT Expression $@8 . SEMICOLON

    SEMICOLON  shift, and go to state 196


State 166

  127 PrintStmt: PRINTLN Expression $@9 . SEMICOLON

    SEMICOLON  shift, and go to state 197


State 167

   49 Operand: ADDR Operand LBRACK . Interindex RBRACK

    DOTDOT      shift, and go to state 198
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Interindex  go to state 199
    Literal     go to state 200


State 168

  128 ReturnStmt: RETURN Expression SEMICOLON .

    $default  reduce using rule 128 (ReturnStmt)


State 169

   87 LOOPStatement: BREAK Literal SEMICOLON .

    $default  reduce using rule 87 (LOOPStatement)


State 170

   41 functionCall: ID LPAREN RPAREN .

    $default  reduce using rule 41 (functionCall)


State 171

   40 functionCall: ID LPAREN $@3 . ParameterListInFunctionCall RPAREN

    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    ParameterListInFunctionCall  go to state 201
    Operand                      go to state 202
    Literal                      go to state 62


State 172

   89 DeclarationStmt: ID Type assign_op . Expression

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 203
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 173

   51 Operand: ID $@4 LBRACK . Expression RBRACK

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 204
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 174

   35 Expression: Expression . binary_op $@2 Expression
   68 AssignmentStmt: ID assign_op Expression . SEMICOLON

    GTR        shift, and go to state 122
    LSS        shift, and go to state 123
    GEQ        shift, and go to state 124
    LEQ        shift, and go to state 125
    EQL        shift, and go to state 126
    NEQ        shift, and go to state 127
    LOR        shift, and go to state 128
    LAND       shift, and go to state 129
    RSHIFT     shift, and go to state 130
    LSHIFT     shift, and go to state 131
    SEMICOLON  shift, and go to state 205
    ADD        shift, and go to state 134
    SUB        shift, and go to state 135
    MUL        shift, and go to state 136
    DIV        shift, and go to state 137
    REM        shift, and go to state 138

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 175

   71 StatementList: StatementList . Statement
   94 Block: LBRACE $@7 StatementList . RBRACE

    LET         shift, and go to state 34
    NEWLINE     shift, and go to state 35
    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    IF          shift, and go to state 36
    FOR         shift, and go to state 37
    WHILE       shift, and go to state 38
    SWITCH      shift, and go to state 39
    CASE        shift, and go to state 40
    PRINT       shift, and go to state 41
    PRINTLN     shift, and go to state 42
    ADDR        shift, and go to state 43
    RETURN      shift, and go to state 44
    BREAK       shift, and go to state 45
    ID          shift, and go to state 46
    LBRACE      shift, and go to state 47
    RBRACE      shift, and go to state 206
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type             go to state 54
    unary_op         go to state 55
    Expression       go to state 56
    UnaryExpr        go to state 57
    functionCall     go to state 58
    PrimaryExpr      go to state 59
    ConversionExpr   go to state 60
    Operand          go to state 61
    Literal          go to state 62
    AssignmentStmt   go to state 63
    IncDecStmt       go to state 64
    Statement        go to state 147
    LOOPStatement    go to state 67
    DeclarationStmt  go to state 68
    SimpleStmt       go to state 69
    Block            go to state 70
    IfStmt           go to state 71
    WhileStmt        go to state 72
    ForStmt          go to state 73
    SwitchStmt       go to state 74
    CaseStmt         go to state 75
    LetStatement     go to state 76
    PrintStmt        go to state 77
    ReturnStmt       go to state 78
    ExpressionStmt   go to state 79


State 176

   52 Operand: LPAREN Expression RPAREN .

    $default  reduce using rule 52 (Operand)


State 177

   35 Expression: Expression . binary_op $@2 Expression
   46 ConversionExpr: Type LPAREN Expression . RPAREN

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    RPAREN  shift, and go to state 207
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 178

   35 Expression: Expression binary_op $@2 . Expression

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 87
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 208
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62


State 179

   33 Expression: UnaryExpr AS Type .

    $default  reduce using rule 33 (Expression)


State 180

  122 LetStatementCon: ASSIGN Literal . SEMICOLON

    SEMICOLON  shift, and go to state 209


State 181

  136 FunctionDeclStmt: FuncOpen LPAREN ParameterList RPAREN ARROW Type FuncBlock .

    $default  reduce using rule 136 (FunctionDeclStmt)


State 182

  139 ParameterList: ParameterList COMMA ID COLON Type .

    $default  reduce using rule 139 (ParameterList)


State 183

  116 LetStatement: LET MUT ID ASSIGN . Operand SEMICOLON

    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Operand  go to state 210
    Literal  go to state 62


State 184

  112 LetStatement: LET MUT ID COLON . Type ASSIGN Literal SEMICOLON
  113             | LET MUT ID COLON . Type SEMICOLON
  115             | LET MUT ID COLON . Type ASSIGN SEMICOLON

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31

    Type  go to state 211


State 185

  118 LetStatement: LET ID ASSIGN Operand . SEMICOLON

    SEMICOLON  shift, and go to state 212


State 186

  117 LetStatement: LET ID COLON LBRACK . Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    BOOL    shift, and go to state 29
    STRING  shift, and go to state 30
    ADDR    shift, and go to state 31

    Type  go to state 213


State 187

  110 LetStatement: LET ID COLON Type . ASSIGN Operand SEMICOLON
  111             | LET ID COLON Type . SEMICOLON
  114             | LET ID COLON Type . ASSIGN SEMICOLON
  119             | LET ID COLON Type . ASSIGN LOOP Block SEMICOLON

    ASSIGN     shift, and go to state 214
    SEMICOLON  shift, and go to state 215


State 188

   95 IfStmt: IF Condition Block ELSE . IfStmt
   97       | IF Condition Block ELSE . Block

    IF      shift, and go to state 36
    LBRACE  shift, and go to state 47

    Block   go to state 216
    IfStmt  go to state 217


State 189

  103 ForClause: ID IN Operand .

    $default  reduce using rule 103 (ForClause)


State 190

   71 StatementList: StatementList . Statement
  101 ForStmt: FOR ForClause LBRACE StatementList . RBRACE

    LET         shift, and go to state 34
    NEWLINE     shift, and go to state 35
    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    IF          shift, and go to state 36
    FOR         shift, and go to state 37
    WHILE       shift, and go to state 38
    SWITCH      shift, and go to state 39
    CASE        shift, and go to state 40
    PRINT       shift, and go to state 41
    PRINTLN     shift, and go to state 42
    ADDR        shift, and go to state 43
    RETURN      shift, and go to state 44
    BREAK       shift, and go to state 45
    ID          shift, and go to state 46
    LBRACE      shift, and go to state 47
    RBRACE      shift, and go to state 218
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type             go to state 54
    unary_op         go to state 55
    Expression       go to state 56
    UnaryExpr        go to state 57
    functionCall     go to state 58
    PrimaryExpr      go to state 59
    ConversionExpr   go to state 60
    Operand          go to state 61
    Literal          go to state 62
    AssignmentStmt   go to state 63
    IncDecStmt       go to state 64
    Statement        go to state 147
    LOOPStatement    go to state 67
    DeclarationStmt  go to state 68
    SimpleStmt       go to state 69
    Block            go to state 70
    IfStmt           go to state 71
    WhileStmt        go to state 72
    ForStmt          go to state 73
    SwitchStmt       go to state 74
    CaseStmt         go to state 75
    LetStatement     go to state 76
    PrintStmt        go to state 77
    ReturnStmt       go to state 78
    ExpressionStmt   go to state 79


State 191

  100 ForStmt: FOR ForClause Block ELSE . Block

    LBRACE  shift, and go to state 47

    Block  go to state 219


State 192

  102 ForClause: InitStmt SEMICOLON Condition . SEMICOLON PostStmt

    SEMICOLON  shift, and go to state 220


State 193

   99 ForStmt: FOR Condition Block ELSE . Block

    LBRACE  shift, and go to state 47

    Block  go to state 221


State 194

  109 CaseStmt: CASE DEFAULT COLON Block .

    $default  reduce using rule 109 (CaseStmt)


State 195

  108 CaseStmt: CASE INT_LIT COLON Block .

    $default  reduce using rule 108 (CaseStmt)


State 196

  125 PrintStmt: PRINT Expression $@8 SEMICOLON .

    $default  reduce using rule 125 (PrintStmt)


State 197

  127 PrintStmt: PRINTLN Expression $@9 SEMICOLON .

    $default  reduce using rule 127 (PrintStmt)


State 198

   54 Interindex: DOTDOT . $@5 Literal

    $default  reduce using rule 53 ($@5)

    $@5  go to state 222


State 199

   49 Operand: ADDR Operand LBRACK Interindex . RBRACK

    RBRACK  shift, and go to state 223


State 200

   56 Interindex: Literal . DOTDOT $@6 Literal
   57           | Literal . DOTDOT

    DOTDOT  shift, and go to state 224


State 201

   40 functionCall: ID LPAREN $@3 ParameterListInFunctionCall . RPAREN

    RPAREN  shift, and go to state 225


State 202

   42 ParameterListInFunctionCall: Operand .
   43                            | Operand . COMMA ParameterListInFunctionCall

    COMMA  shift, and go to state 226

    $default  reduce using rule 42 (ParameterListInFunctionCall)


State 203

   35 Expression: Expression . binary_op $@2 Expression
   89 DeclarationStmt: ID Type assign_op Expression .

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    $default  reduce using rule 89 (DeclarationStmt)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 204

   35 Expression: Expression . binary_op $@2 Expression
   51 Operand: ID $@4 LBRACK Expression . RBRACK

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    RBRACK  shift, and go to state 227
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 205

   68 AssignmentStmt: ID assign_op Expression SEMICOLON .

    $default  reduce using rule 68 (AssignmentStmt)


State 206

   94 Block: LBRACE $@7 StatementList RBRACE .

    $default  reduce using rule 94 (Block)


State 207

   46 ConversionExpr: Type LPAREN Expression RPAREN .

    $default  reduce using rule 46 (ConversionExpr)


State 208

   35 Expression: Expression . binary_op $@2 Expression
   35           | Expression binary_op $@2 Expression .

    GTR     shift, and go to state 122
    LSS     shift, and go to state 123
    GEQ     shift, and go to state 124
    LEQ     shift, and go to state 125
    EQL     shift, and go to state 126
    NEQ     shift, and go to state 127
    LOR     shift, and go to state 128
    LAND    shift, and go to state 129
    RSHIFT  shift, and go to state 130
    LSHIFT  shift, and go to state 131
    ADD     shift, and go to state 134
    SUB     shift, and go to state 135
    MUL     shift, and go to state 136
    DIV     shift, and go to state 137
    REM     shift, and go to state 138

    GTR       [reduce using rule 35 (Expression)]
    LSS       [reduce using rule 35 (Expression)]
    GEQ       [reduce using rule 35 (Expression)]
    LEQ       [reduce using rule 35 (Expression)]
    EQL       [reduce using rule 35 (Expression)]
    NEQ       [reduce using rule 35 (Expression)]
    LOR       [reduce using rule 35 (Expression)]
    LAND      [reduce using rule 35 (Expression)]
    RSHIFT    [reduce using rule 35 (Expression)]
    LSHIFT    [reduce using rule 35 (Expression)]
    ADD       [reduce using rule 35 (Expression)]
    SUB       [reduce using rule 35 (Expression)]
    MUL       [reduce using rule 35 (Expression)]
    DIV       [reduce using rule 35 (Expression)]
    REM       [reduce using rule 35 (Expression)]
    $default  reduce using rule 35 (Expression)

    binary_op  go to state 139
    shift_op   go to state 140
    cmp_op     go to state 141
    add_op     go to state 142
    mul_op     go to state 143


State 209

  122 LetStatementCon: ASSIGN Literal SEMICOLON .

    $default  reduce using rule 122 (LetStatementCon)


State 210

  116 LetStatement: LET MUT ID ASSIGN Operand . SEMICOLON

    SEMICOLON  shift, and go to state 228


State 211

  112 LetStatement: LET MUT ID COLON Type . ASSIGN Literal SEMICOLON
  113             | LET MUT ID COLON Type . SEMICOLON
  115             | LET MUT ID COLON Type . ASSIGN SEMICOLON

    ASSIGN     shift, and go to state 229
    SEMICOLON  shift, and go to state 230


State 212

  118 LetStatement: LET ID ASSIGN Operand SEMICOLON .

    $default  reduce using rule 118 (LetStatement)


State 213

  117 LetStatement: LET ID COLON LBRACK Type . SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON

    SEMICOLON  shift, and go to state 231


State 214

  110 LetStatement: LET ID COLON Type ASSIGN . Operand SEMICOLON
  114             | LET ID COLON Type ASSIGN . SEMICOLON
  119             | LET ID COLON Type ASSIGN . LOOP Block SEMICOLON

    LOOP        shift, and go to state 232
    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    SEMICOLON   shift, and go to state 233
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Operand  go to state 234
    Literal  go to state 62


State 215

  111 LetStatement: LET ID COLON Type SEMICOLON .

    $default  reduce using rule 111 (LetStatement)


State 216

   97 IfStmt: IF Condition Block ELSE Block .

    $default  reduce using rule 97 (IfStmt)


State 217

   95 IfStmt: IF Condition Block ELSE IfStmt .

    $default  reduce using rule 95 (IfStmt)


State 218

  101 ForStmt: FOR ForClause LBRACE StatementList RBRACE .

    $default  reduce using rule 101 (ForStmt)


State 219

  100 ForStmt: FOR ForClause Block ELSE Block .

    $default  reduce using rule 100 (ForStmt)


State 220

  102 ForClause: InitStmt SEMICOLON Condition SEMICOLON . PostStmt

    INT         shift, and go to state 27
    FLOAT       shift, and go to state 28
    BOOL        shift, and go to state 29
    STRING      shift, and go to state 30
    ADDR        shift, and go to state 43
    ID          shift, and go to state 235
    LPAREN      shift, and go to state 48
    NOT         shift, and go to state 49
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Type            go to state 54
    unary_op        go to state 55
    Expression      go to state 56
    UnaryExpr       go to state 57
    functionCall    go to state 89
    PrimaryExpr     go to state 59
    ConversionExpr  go to state 60
    Operand         go to state 61
    Literal         go to state 62
    AssignmentStmt  go to state 63
    IncDecStmt      go to state 64
    SimpleStmt      go to state 236
    PostStmt        go to state 237
    ExpressionStmt  go to state 79


State 221

   99 ForStmt: FOR Condition Block ELSE Block .

    $default  reduce using rule 99 (ForStmt)


State 222

   54 Interindex: DOTDOT $@5 . Literal

    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Literal  go to state 238


State 223

   49 Operand: ADDR Operand LBRACK Interindex RBRACK .

    $default  reduce using rule 49 (Operand)


State 224

   56 Interindex: Literal DOTDOT . $@6 Literal
   57           | Literal DOTDOT .

    RBRACK    reduce using rule 57 (Interindex)
    $default  reduce using rule 55 ($@6)

    $@6  go to state 239


State 225

   40 functionCall: ID LPAREN $@3 ParameterListInFunctionCall RPAREN .

    $default  reduce using rule 40 (functionCall)


State 226

   43 ParameterListInFunctionCall: Operand COMMA . ParameterListInFunctionCall

    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    ParameterListInFunctionCall  go to state 240
    Operand                      go to state 202
    Literal                      go to state 62


State 227

   51 Operand: ID $@4 LBRACK Expression RBRACK .

    $default  reduce using rule 51 (Operand)


State 228

  116 LetStatement: LET MUT ID ASSIGN Operand SEMICOLON .

    $default  reduce using rule 116 (LetStatement)


State 229

  112 LetStatement: LET MUT ID COLON Type ASSIGN . Literal SEMICOLON
  115             | LET MUT ID COLON Type ASSIGN . SEMICOLON

    SEMICOLON   shift, and go to state 241
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Literal  go to state 242


State 230

  113 LetStatement: LET MUT ID COLON Type SEMICOLON .

    $default  reduce using rule 113 (LetStatement)


State 231

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON . Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON

    ADDR        shift, and go to state 103
    ID          shift, and go to state 104
    LPAREN      shift, and go to state 48
    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Operand  go to state 243
    Literal  go to state 62


State 232

  119 LetStatement: LET ID COLON Type ASSIGN LOOP . Block SEMICOLON

    LBRACE  shift, and go to state 47

    Block  go to state 244


State 233

  114 LetStatement: LET ID COLON Type ASSIGN SEMICOLON .

    $default  reduce using rule 114 (LetStatement)


State 234

  110 LetStatement: LET ID COLON Type ASSIGN Operand . SEMICOLON

    SEMICOLON  shift, and go to state 245


State 235

   40 functionCall: ID . LPAREN $@3 ParameterListInFunctionCall RPAREN
   41             | ID . LPAREN RPAREN
   48 Operand: ID .
   51        | ID . $@4 LBRACK Expression RBRACK
   68 AssignmentStmt: ID . assign_op Expression SEMICOLON

    ASSIGN      shift, and go to state 108
    ADD_ASSIGN  shift, and go to state 109
    SUB_ASSIGN  shift, and go to state 110
    MUL_ASSIGN  shift, and go to state 111
    DIV_ASSIGN  shift, and go to state 112
    REM_ASSIGN  shift, and go to state 113
    LPAREN      shift, and go to state 114

    LBRACK    reduce using rule 50 ($@4)
    $default  reduce using rule 48 (Operand)

    $@4        go to state 116
    assign_op  go to state 117


State 236

  106 PostStmt: SimpleStmt .

    $default  reduce using rule 106 (PostStmt)


State 237

  102 ForClause: InitStmt SEMICOLON Condition SEMICOLON PostStmt .

    $default  reduce using rule 102 (ForClause)


State 238

   54 Interindex: DOTDOT $@5 Literal .

    $default  reduce using rule 54 (Interindex)


State 239

   56 Interindex: Literal DOTDOT $@6 . Literal

    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Literal  go to state 246


State 240

   43 ParameterListInFunctionCall: Operand COMMA ParameterListInFunctionCall .

    $default  reduce using rule 43 (ParameterListInFunctionCall)


State 241

  115 LetStatement: LET MUT ID COLON Type ASSIGN SEMICOLON .

    $default  reduce using rule 115 (LetStatement)


State 242

  112 LetStatement: LET MUT ID COLON Type ASSIGN Literal . SEMICOLON

    SEMICOLON  shift, and go to state 247


State 243

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON Operand . RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON

    RBRACK  shift, and go to state 248


State 244

  119 LetStatement: LET ID COLON Type ASSIGN LOOP Block . SEMICOLON

    SEMICOLON  shift, and go to state 249


State 245

  110 LetStatement: LET ID COLON Type ASSIGN Operand SEMICOLON .

    $default  reduce using rule 110 (LetStatement)


State 246

   56 Interindex: Literal DOTDOT $@6 Literal .

    $default  reduce using rule 56 (Interindex)


State 247

  112 LetStatement: LET MUT ID COLON Type ASSIGN Literal SEMICOLON .

    $default  reduce using rule 112 (LetStatement)


State 248

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON Operand RBRACK . ASSIGN LBRACK LiteralList RBRACK SEMICOLON

    ASSIGN  shift, and go to state 250


State 249

  119 LetStatement: LET ID COLON Type ASSIGN LOOP Block SEMICOLON .

    $default  reduce using rule 119 (LetStatement)


State 250

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN . LBRACK LiteralList RBRACK SEMICOLON

    LBRACK  shift, and go to state 251


State 251

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK . LiteralList RBRACK SEMICOLON

    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Literal      go to state 252
    LiteralList  go to state 253


State 252

  120 LiteralList: Literal . COMMA LiteralList
  121            | Literal .

    COMMA  shift, and go to state 254

    $default  reduce using rule 121 (LiteralList)


State 253

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList . RBRACK SEMICOLON

    RBRACK  shift, and go to state 255


State 254

  120 LiteralList: Literal COMMA . LiteralList

    INT_LIT     shift, and go to state 50
    FLOAT_LIT   shift, and go to state 51
    BOOL_LIT    shift, and go to state 52
    STRING_LIT  shift, and go to state 53

    Literal      go to state 252
    LiteralList  go to state 256


State 255

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK . SEMICOLON

    SEMICOLON  shift, and go to state 257


State 256

  120 LiteralList: Literal COMMA LiteralList .

    $default  reduce using rule 120 (LiteralList)


State 257

  117 LetStatement: LET ID COLON LBRACK Type SEMICOLON Operand RBRACK ASSIGN LBRACK LiteralList RBRACK SEMICOLON .

    $default  reduce using rule 117 (LetStatement)
